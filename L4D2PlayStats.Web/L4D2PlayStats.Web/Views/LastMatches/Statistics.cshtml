@using L4D2PlayStats
@using L4D2PlayStats.Core.Auth
@using L4D2PlayStats.Core.Infrastructure.Extensions
@using L4D2PlayStats.Core.UserAvatar
@using L4D2PlayStats.Enums
@using L4D2PlayStats.Extensions
@using L4D2PlayStats.Web
@using Microsoft.Extensions.Localization
@model L4D2PlayStats.Web.Models.StatisticsDetailsModel
@inject IStringLocalizer<SharedResource> SharedLocalizer
@inject IUserAvatar UserAvatar
@inject ICurrentUser CurrentUser

@section Styles {
    <style>
    @@media screen and (min-width: 992px) {
            .round-details .left-side {
                padding-right: 3px;
            }

            .round-details .right-side {
                padding-left: 3px;
            }
    }

    .player-name {
        overflow-wrap: break-word;
        white-space: wrap;
    }
    </style>
}

@{
    void RenderPlayerStats(List<Player> players, PlayerStats playerStats)
    {
        <tr>
            <th>@SharedLocalizer[playerStats.ToString()]:</th>
            @foreach (var player in players)
            {
                <td class="slim text-center">
                    @player[playerStats].ToString("N0")
                </td>
            }
        </tr>
    }

    void RenderPlayerStatsCollection(List<Player> players, IEnumerable<PlayerStats> playerStats, bool lineBreak = true)
    {
        var any = false;

        @foreach (var ps in playerStats)
        {
            RenderPlayerStats(players, ps);
            any = true;
        }

        @if (lineBreak && any)
        {
            <tr>
                <td colspan="@(players.Count + 1)"></td>
            </tr>
        }
    }

    void RenderPlayerStatsBetween(List<Player> players, PlayerStats start, PlayerStats end, bool lineBreak = true)
    {
        var startValue = (int)start;
        var endValue = (int)end;
        var count = Math.Max(endValue - startValue + 1, 1);
        var playerStats = Enumerable.Range(startValue, count).Select(v => (PlayerStats)v);

        RenderPlayerStatsCollection(players, playerStats, lineBreak);
    }

    void RenderInfectedStats(List<InfectedPlayer> infectedPlayers, InfectedStats infectedStats)
    {
        <tr>
            <th>@SharedLocalizer[infectedStats.ToString()]:</th>
            @foreach (var infectedPlayer in infectedPlayers)
            {
                <td class="slim text-center">
                    @infectedPlayer[infectedStats].ToString("N0")
                </td>
            }
        </tr>
    }

    void RenderInfectedStatsCollection(List<InfectedPlayer> infectedPlayers, IEnumerable<InfectedStats> infectedStats, bool lineBreak = true)
    {
        var any = false;

        @foreach (var ps in infectedStats)
        {
            RenderInfectedStats(infectedPlayers, ps);
            any = true;
        }

        @if (lineBreak && any)
        {
            <tr>
                <td colspan="@(infectedPlayers.Count + 1)"></td>
            </tr>
        }
    }

    void RenderInfectedStatsBetween(List<InfectedPlayer> infectedPlayers, InfectedStats start, InfectedStats end, bool lineBreak = true)
    {
        var startValue = (int)start;
        var endValue = (int)end;
        var count = Math.Max(endValue - startValue + 1, 1);
        var infectedStats = Enumerable.Range(startValue, count).Select(v => (InfectedStats)v);

        RenderInfectedStatsCollection(infectedPlayers, infectedStats, lineBreak);
    }
}

@if (Model.Statistics.Count == 0)
{
    <div class="row">
        <div class="col-xs-12">
            <h4 class="text-center">
                @SharedLocalizer["NoMatchFound"]
            </h4>
        </div>
    </div>
    return;
}

@{
    var match = Model.Match;
    var gameRound = Model.Statistic?.Statistic?.GameRound;
    var halves = Model.Statistic?.Statistic?.Halves ?? new List<Statistics.Half>();
    var allPlayers = Model.Statistic?.Statistic?.PlayerNames ?? new List<PlayerName>();
}

<h4 class="text-center">@SharedLocalizer["MatchDetails"]</h4>

<ol class="breadcrumb">
    <li>
        @Html.ActionLink(SharedLocalizer["LastMatches"].Value, "Index", "LastMatches")
    </li>
    <li>
        @Html.ActionLink(match.Campaign ?? SharedLocalizer["Campaign"].Value, "Details", "LastMatches", new { start = match.Start, end = match.End })
    </li>
    <li>
        @gameRound?.MapName
    </li>
</ol>

<div class="maps">
    <div class="panel panel-default">
        <table class="table table-striped table-hover table-condensed table-responsive">
            <thead>
            <tr>
                <th class="text-center">#</th>
                <th class="text-center">@SharedLocalizer["Map"]</th>
                <th class="text-center">@SharedLocalizer["Start"]</th>
                <th class="text-center">@SharedLocalizer["End"]</th>
                <th class="text-center">@SharedLocalizer["Elapsed"]</th>
                <th class="text-center slim" colspan="3">@SharedLocalizer["Scoreboard"]</th>
            </tr>
            </thead>
            <tbody>
            @for (var i = 0; i < Model.Statistics.Count; i++)
            {
                var result = Model.Statistics[i];
                var scoring = result.Statistic?.Scoring;
                var labelTeamA = scoring?.Draw == true ? "default" : scoring?.TeamAWon == true ? "success" : "danger";
                var labelTeamB = scoring?.Draw == true ? "default" : scoring?.TeamBWon == true ? "success" : "danger";

                <tr class="@(Model.Statistic?.StatisticId == result.StatisticId ? "info" : string.Empty)">
                    <td class="text-center" data-label="#">
                        <a href="@Url.Action("Statistics", "LastMatches", new { start = Model.Match.Start, end = Model.Match.End, statisticId = result.StatisticId })">
                            #@(i + 1)
                        </a>
                    </td>
                    <td class="text-center" data-label="@SharedLocalizer["Map"]">
                        <a href="@Url.Action("Statistics", "LastMatches", new { start = Model.Match.Start, end = Model.Match.End, statisticId = result.StatisticId })">
                            @result.Statistic?.GameRound?.MapName
                        </a>
                    </td>
                    <td class="text-center" data-label="@SharedLocalizer["Start"]">@result.Statistic?.MapStart?.ToString("d") @result.Statistic?.MapStart?.ToString("HH:mm")</td>
                    <td class="text-center" data-label="@SharedLocalizer["End"]">@result.Statistic?.MapEnd?.ToString("d") @result.Statistic?.MapEnd?.ToString("HH:mm")</td>
                    <td class="text-center" data-label="@SharedLocalizer["Elapsed"]">@result.Statistic?.MapElapsed?.ToString(@"hh\:mm\:ss")</td>
                    <td class="text-center slim" data-label="@SharedLocalizer["TeamAScore"]">
                        <span class="label label-@labelTeamA" data-toggle="tooltip" data-placement="top" title="@SharedLocalizer["TeamAScore"]">
                            @scoring?.TeamA?.Score.ToString("N0")
                        </span>
                    </td>
                    <td class="text-center slim" data-label="@SharedLocalizer["ScoreDifference"]">
                        <span class="label label-default" data-toggle="tooltip" data-placement="top" title="@SharedLocalizer["ScoreDifference"]">
                            @scoring?.ScoreDiff?.ToString("N0")
                        </span>
                    </td>
                    <td class="text-center slim" data-label="@SharedLocalizer["TeamBScore"]">
                        <span class="label label-@labelTeamB" data-toggle="tooltip" data-placement="top" title="@SharedLocalizer["TeamBScore"]">
                            @scoring?.TeamB?.Score.ToString("N0")
                        </span>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

<ul class="nav nav-tabs">
    @for (var round = 1; round <= halves.Count; round++)
    {
        <li class="@(round == 1 ? "active" : string.Empty)">
            <a href="#tab-round-half-@round" data-toggle="tab">
                @(round == 1 ? SharedLocalizer["FirstRound"] : SharedLocalizer["SecondRound"])
            </a>
        </li>
    }
</ul>

<br/>

<div class="tab-content">
@for (var round = 1; round <= halves.Count; round++)
{
    var half = halves[round - 1];
    var roundHalf = half.RoundHalf!;
    var scoring = Model.Statistic?.Statistic?.Scoring;
    var survivorWinning = round == 1 ? scoring?.TeamAWon : scoring?.TeamBWon;
    var infectedWinning = round == 1 ? scoring?.TeamBWon : scoring?.TeamAWon;

    var mvpSiDamage = half.Players.OrderByDescending(p => p.SiDamage).FirstOrDefault();
    var mvpCommon = half.Players.OrderByDescending(p => p.Common).FirstOrDefault();
    var lvpFfGiven = half.Players.OrderByDescending(p => p.FfGiven).FirstOrDefault();

    var players = half.Players
        .OrderByDescending(p => p == mvpSiDamage)
        .ThenByDescending(p => p == mvpCommon)
        .ThenBy(p => p == lvpFfGiven)
        .ToList();

    var infectedPlayers = half.InfectedPlayers
        .OrderByDescending(p => p.DmgTotal)
        .ToList();

    <div id="tab-round-half-@round" class="tab-pane fade @(round == 1 ? "in active" : string.Empty) match">
    <div class="row">
        <div class="col-md-5">
            <div class="row">
                <div class="col-xs-6" style="padding-right: 3px">
                    <div class="panel panel-@(survivorWinning == true ? "success" : "danger")" style="margin-bottom: 0;">
                        <div class="panel-heading bold" style="padding: 3px 15px">
                            @SharedLocalizer["Survivors"]
                        </div>
                        <div class="panel-body" style="padding: 0">
                            <table class="table table-striped table-hover table-bordered table-condensed">
                                <tbody>
                                @foreach (var player in players)
                                {
                                    <tr class="@(CurrentUser.ItIsMe(player.CommunityId) ? "it-is-me" : string.Empty)">
                                        <td style="padding: 2px" class="slim">
                                            <a href="@Url.Action("Details", "Players", new { communityId = player.CommunityId })" title="@player.PlayerName">
                                                <img src="@UserAvatar[player.CommunityId]" alt="@player.PlayerName" title="@player.PlayerName" style="width: 32px; border-radius: 5px" onerror="imgOnError(this)"/>
                                            </a>
                                        </td>
                                        <td class="vertical-align-middle">
                                            @Html.ActionLink(player.PlayerName?.Truncate(30) ?? "-", "Details", "Players", new { communityId = player.CommunityId })

                                            @if (player == mvpSiDamage)
                                            {
                                                <img src="~/imgs/icons/star.png" alt="@SharedLocalizer["MvpSiDamage"]" class="icon" data-toggle="tooltip" data-placement="top" title="@SharedLocalizer["MvpSiDamage"]"/>
                                            }

                                            @if (player == mvpCommon)
                                            {
                                                <img src="~/imgs/icons/star-blue.png" alt="@SharedLocalizer["MvpCommon"]" class="icon" data-toggle="tooltip" data-placement="top" title="@SharedLocalizer["MvpCommon"]"/>
                                            }

                                            @if (player == lvpFfGiven)
                                            {
                                                <img src="~/imgs/icons/lvp.png" alt="@SharedLocalizer["LvpFfGiven"]" class="icon" data-toggle="tooltip" data-placement="top" title="@SharedLocalizer["LvpFfGiven"]"/>
                                            }
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="col-xs-6" style="padding-left: 3px">
                    <div class="panel panel-@(infectedWinning == true ? "success" : "danger")" style="margin-bottom: 0;">
                        <div class="panel-heading bold" style="padding: 3px 15px">
                            @SharedLocalizer["Infecteds"]
                        </div>
                        <div class="panel-body" style="padding: 0">
                            <table class="table table-striped table-hover table-bordered table-condensed">
                                <tbody>
                                @foreach (var infectedPlayer in infectedPlayers)
                                {
                                    <tr class="@(CurrentUser.ItIsMe(infectedPlayer.CommunityId) ? "it-is-me" : string.Empty)">
                                        <td style="padding: 2px" class="slim">
                                            <a href="@Url.Action("Details", "Players", new { communityId = infectedPlayer.CommunityId })" title="@infectedPlayer.PlayerName">
                                                <img src="@UserAvatar[infectedPlayer.CommunityId]" alt="@infectedPlayer.PlayerName" title="@infectedPlayer.PlayerName" style="width: 32px; border-radius: 5px" onerror="imgOnError(this)"/>
                                            </a>
                                        </td>
                                        <td class="vertical-align-middle">
                                            @Html.ActionLink(infectedPlayer.PlayerName?.Truncate(30) ?? "-", "Details", "Players", new { communityId = infectedPlayer.CommunityId })
                                        </td>
                                        <td class="slim text-center">
                                            <span data-toggle="tooltip" data-placement="top" title="@SharedLocalizer["DmgTotal"]">
                                                @infectedPlayer.DmgTotal.ToString("N0")
                                            </span>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-7">
            <div class="panel panel-default" style="margin-bottom: 0;">
                <div class="panel-heading bold" style="padding: 3px 15px">
                    @SharedLocalizer["Details"]
                </div>
                <div class="panel-body" style="padding: 0">
                    <div class="row round-details">
                        <div class="col-md-6 left-side">
                            <table class="table table-striped table-hover table-bordered table-condensed">
                                <tbody>
                                @foreach (var roundStats in Enum
                                              .GetValues<RoundStats>()
                                              .Where(rs => rs.DataType() == DataType.Number && @roundHalf[rs] != 0))
                                {
                                    <tr>
                                        <th>@SharedLocalizer[roundStats.ToString()]:</th>
                                        <td class="slim text-center">@roundHalf[roundStats].ToString("N0")</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                        <div class="col-md-6 right-side">
                            <table class="table table-striped table-hover table-bordered table-condensed">
                                <tbody>
                                @if (roundHalf.StartTime != null)
                                {
                                    <tr>
                                        <th>@SharedLocalizer["StartTime"]:</th>
                                        <td class="slim text-center">@($"{roundHalf.StartTime.Value:d} {roundHalf.StartTime.Value:HH:mm}")</td>
                                    </tr>
                                }
                                @if (roundHalf.EndTime != null)
                                {
                                    <tr>
                                        <th>@SharedLocalizer["EndTime"]:</th>
                                        <td class="slim text-center">@($"{roundHalf.EndTime.Value:d} {roundHalf.EndTime.Value:HH:mm}")</td>
                                    </tr>
                                }
                                @if (roundHalf.RoundElapsed != null)
                                {
                                    <tr>
                                        <th>@SharedLocalizer["RoundElapsed"]:</th>
                                        <td class="slim text-center">@roundHalf.RoundElapsed.Value.ToString(@"hh\:mm\:ss")</td>
                                    </tr>
                                }
                                @if (roundHalf.StartTimePause != null)
                                {
                                    <tr>
                                        <th>@SharedLocalizer["StartTimePause"]:</th>
                                        <td class="slim text-center">@($"{roundHalf.StartTimePause.Value:d} {roundHalf.StartTimePause.Value:HH:mm}")</td>
                                    </tr>
                                }
                                @if (roundHalf.StopTimePause != null)
                                {
                                    <tr>
                                        <th>@SharedLocalizer["StopTimePause"]:</th>
                                        <td class="slim text-center">@($"{roundHalf.StopTimePause.Value:d} {roundHalf.StopTimePause.Value:HH:mm}")</td>
                                    </tr>
                                }
                                @if (roundHalf.PauseElapsed != null)
                                {
                                    <tr>
                                        <th>@SharedLocalizer["PauseElapsed"]:</th>
                                        <td class="slim text-center">@roundHalf.PauseElapsed.Value.ToString(@"hh\:mm\:ss")</td>
                                    </tr>
                                }
                                @if (roundHalf.StartTimeTank != null)
                                {
                                    <tr>
                                        <th>@SharedLocalizer["StartTimeTank"]:</th>
                                        <td class="slim text-center">@($"{roundHalf.StartTimeTank.Value:d} {roundHalf.StartTimeTank.Value:HH:mm}")</td>
                                    </tr>
                                }
                                @if (roundHalf.StopTimeTank != null)
                                {
                                    <tr>
                                        <th>@SharedLocalizer["StopTimeTank"]:</th>
                                        <td class="slim text-center">@($"{roundHalf.StopTimeTank.Value:d} {roundHalf.StopTimeTank.Value:HH:mm}")</td>
                                    </tr>
                                }
                                @if (roundHalf.TankElapsed != null)
                                {
                                    <tr>
                                        <th>@SharedLocalizer["TankElapsed"]:</th>
                                        <td class="slim text-center">@roundHalf.TankElapsed.Value.ToString(@"hh\:mm\:ss")</td>
                                    </tr>
                                }
                                </tbody>
                            </table>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <br/>

    <div class="row">
    <div class="col-md-6">
    <div class="panel panel-default" style="margin-bottom: 0;">
    <div class="panel-heading bold" style="padding: 3px 15px">
        @SharedLocalizer["Survivors"]
    </div>
    <div class="panel-body" style="padding: 0">
    <table class="table table-striped table-hover table-bordered table-condensed">
    <thead>
    <tr>
        <th></th>
        @foreach (var player in players)
        {
            <th class="text-center player-name">
                <a href="@player.ProfileUrl" title="@player.PlayerName">
                    @player.PlayerName
                </a>
            </th>
        }
    </tr>
    </thead>
    <tbody>
    
    @{
        RenderPlayerStatsCollection(players, new []
        {
            PlayerStats.Died,
            PlayerStats.Incaps,
            PlayerStats.DmgTaken,
            PlayerStats.FallDamage
        });
    }

    @{
        var weapons = Enum
            .GetValues<PlayerStats>()
            .Where(ps => ps.ToString().StartsWith("Shots"))
            .Select(ps => ps.ToString().Substring(5));
    }

    @foreach (var weapon in weapons)
    {
        if (!Enum.TryParse($"Shots{weapon}", out PlayerStats shots)
            || !Enum.TryParse($"Hits{weapon}", out PlayerStats hits)
            || !Enum.TryParse($"HitsSi{weapon}", out PlayerStats hitsSi)
            || !Enum.TryParse($"HitsTank{weapon}", out PlayerStats hitsTank))
            continue;

        <tr>
            <th>@SharedLocalizer[shots.ToString()]:</th>
            @foreach (var player in players)
            {
                <td class="slim text-center">
                    @player[shots].ToString("N0")
                </td>
            }
        </tr>
        <tr>
            <th>@SharedLocalizer[hits.ToString()]:</th>
            @foreach (var player in players)
            {
                <td class="slim text-center">
                    @player[hits].ToString("N0")
                </td>
            }
        </tr>
        <tr>
            <th>@SharedLocalizer[$"Hits{weapon}Percent"]:</th>
            @foreach (var player in players)
            {
                var percent = player[shots] != 0 ? player[hits] / (decimal)player[shots] : 0;
                <td class="slim text-center">
                    @percent.ToString("P0")
                </td>
            }
        </tr>
        <tr>
            <th>@SharedLocalizer[hitsSi.ToString()]:</th>
            @foreach (var player in players)
            {
                <td class="slim text-center">
                    @player[hitsSi].ToString("N0")
                </td>
            }
        </tr>
        <tr>
            <th>@SharedLocalizer[$"HitsSi{weapon}Percent"]:</th>
            @foreach (var player in players)
            {
                var percent = player[shots] != 0 ? player[hitsSi] / (decimal)player[shots] : 0;
                <td class="slim text-center">
                    @percent.ToString("P0")
                </td>
            }
        </tr>
        <tr>
            <th>@SharedLocalizer[hitsTank.ToString()]:</th>
            @foreach (var player in players)
            {
                <td class="slim text-center">
                    @player[hitsTank].ToString("N0")
                </td>
            }
        </tr>
        <tr>
            <th>@SharedLocalizer[$"HitsTank{weapon}Percent"]:</th>
            @foreach (var player in players)
            {
                var percent = player[shots] != 0 ? player[hitsTank] / (decimal)player[shots] : 0;
                <td class="slim text-center">
                    @percent.ToString("P0")
                </td>
            }
        </tr>

        @if (Enum.TryParse($"Headshots{weapon}", out PlayerStats headshots)
             && Enum.TryParse($"HeadshotsSi{weapon}", out PlayerStats headshotsSi))
        {
            <tr>
                <th>@SharedLocalizer[headshots.ToString()]:</th>
                @foreach (var player in players)
                {
                    <td class="slim text-center">
                        @player[headshots].ToString("N0")
                    </td>
                }
            </tr>
            <tr>
                <th>@SharedLocalizer[$"Headshots{weapon}Percent"]:</th>
                @foreach (var player in players)
                {
                    var percent = player[shots] != 0 ? player[headshots] / (decimal)player[shots] : 0;
                    <td class="slim text-center">
                        @percent.ToString("P0")
                    </td>
                }
            </tr>
            <tr>
                <th>@SharedLocalizer[headshotsSi.ToString()]:</th>
                @foreach (var player in players)
                {
                    <td class="slim text-center">
                        @player[headshotsSi].ToString("N0")
                    </td>
                }
            </tr>
            <tr>
                <th>@SharedLocalizer[$"HeadshotsSi{weapon}Percent"]:</th>
                @foreach (var player in players)
                {
                    var percent = player[shots] != 0 ? player[headshotsSi] / (decimal)player[shots] : 0;
                    <td class="slim text-center">
                        @percent.ToString("P0")
                    </td>
                }
            </tr>
        }

        <tr>
            <td colspan="@(players.Count + 1)"></td>
        </tr>
    }
    
    @{
        RenderPlayerStatsBetween(players, PlayerStats.Common, PlayerStats.SiDamageTankUp);
        RenderPlayerStatsBetween(players, PlayerStats.TankDamage, PlayerStats.RockEats);
        RenderPlayerStatsBetween(players, PlayerStats.Skeets, PlayerStats.SelfClears, lineBreak: false);
        RenderPlayerStatsBetween(players, PlayerStats.Clears, PlayerStats.AvgClearTime);
    }

    @{
        RenderPlayerStatsCollection(players, new [] { PlayerStats.FfHits, PlayerStats.FfGiven }, lineBreak: false);
        RenderPlayerStatsBetween(players, PlayerStats.FfGivenPellet, PlayerStats.FfGivenSelf, lineBreak: false);
        RenderPlayerStats(players, PlayerStats.FfGivenTotal);
    }

    <tr>
        <td colspan="@(players.Count + 1)"></td>
    </tr>
    
    <tr>
        <th>@SharedLocalizer["FfTaken"]:</th>
        <td colspan="@players.Count"></td>
    </tr>
    
    @{
        RenderPlayerStatsBetween(players, PlayerStats.FfTakenPellet, PlayerStats.FfTakenOther, lineBreak: false);
        RenderPlayerStats(players, PlayerStats.FfTakenTotal);
    }
    </tbody>
    </table>
    </div>
    </div>
    </div>
    <div class="col-md-6">
        <div class="panel panel-default" style="margin-bottom: 0;">
            <div class="panel-heading bold" style="padding: 3px 15px">
                @SharedLocalizer["Infecteds"]
            </div>
            <div class="panel-body" style="padding: 0">
                <table class="table table-striped table-hover table-bordered table-condensed">
                    <thead>
                    <tr>
                        <th></th>
                        @foreach (var infectedPlayer in infectedPlayers)
                        {
                            <th class="text-center player-name">
                                <a href="@infectedPlayer.ProfileUrl" title="@infectedPlayer.PlayerName">
                                    @infectedPlayer.PlayerName
                                </a>
                            </th>
                        }
                    </tr>
                    </thead>
                    <tbody>
                    @{
                        RenderInfectedStatsBetween(infectedPlayers, InfectedStats.DmgTotal, InfectedStats.DmgUpright);
                        
                        RenderInfectedStatsCollection(infectedPlayers, new []
                        {
                            InfectedStats.DmgTank,
                            InfectedStats.DmgTankIncap,
                            InfectedStats.TankPasses
                        });
                        
                        RenderInfectedStatsCollection(infectedPlayers, new []
                        {
                            InfectedStats.DmgScratch,
                            InfectedStats.DmgTankUp,
                            InfectedStats.DmgSpit,
                            InfectedStats.DmgBoom
                        });

                        RenderInfectedStatsBetween(infectedPlayers, InfectedStats.HunterDPs, InfectedStats.Ledged, lineBreak:false);

                        RenderInfectedStats(infectedPlayers, InfectedStats.Common);
                    }
                    
                    <tr>
                        <td colspan="@(infectedPlayers.Count + 1)"></td>
                    </tr>
                    
                    @{
                        RenderInfectedStatsBetween(infectedPlayers, InfectedStats.Spawns, InfectedStats.SpawnJockey, lineBreak:false);
                    }
                    </tbody>
                </table>

            </div>
        </div>


        <br/>

        <div class="panel panel-default" style="margin-bottom: 0;">
            <div class="panel-heading bold" style="padding: 3px 15px">
                @SharedLocalizer["ConnectedPlayers"]
            </div>
            <div class="panel-body" style="padding: 0">
                <table class="table table-striped table-hover table-bordered table-condensed">
                    <thead>
                    <tr>
                        <th>#</th>
                        <th>Steam ID</th>
                        <th>Community ID</th>
                        <th>@SharedLocalizer["Name"]</th>
                    </tr>
                    </thead>
                    <tbody>
                    @for (var i = 0; i < allPlayers.Count; i++)
                    {
                        var playerName = allPlayers[i];
                        <tr>
                            <td>@(i + 1)</td>
                            <td>@playerName.SteamId</td>
                            <td>@playerName.CommunityId</td>
                            <td>
                                <a href="@playerName.ProfileUrl" title="@playerName.Name">
                                    @playerName.Name
                                </a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>

            </div>
        </div>
    </div>
    </div>
    </div>
}
</div>