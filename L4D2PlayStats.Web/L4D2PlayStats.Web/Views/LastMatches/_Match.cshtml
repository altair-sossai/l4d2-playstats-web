@using System.Text.Json
@using L4D2PlayStats.Core.Auth
@using L4D2PlayStats.Core.Campaign
@using L4D2PlayStats.Core.Infrastructure.Extensions
@using L4D2PlayStats.Core.UserAvatar
@using L4D2PlayStats.Sdk.Matches.Results
@using L4D2PlayStats.Web
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Localization
@model L4D2PlayStats.Sdk.Matches.Results.MatchResult
@inject ICampaignThumb CampaignThumb
@inject IUserAvatar UserAvatar
@inject IStringLocalizer<SharedResource> SharedLocalizer
@inject IViewLocalizer Localizer
@inject ICurrentUser CurrentUser

@{
    var light = Context.Request.Cookies["theme"] == "light";

    const string success = "rgba(40, 167, 69, 1)";
    const string danger = "rgba(220, 53, 69, 1)";
    const string transparent = "rgba(0, 0, 0, 0)";

    var fontColor = light ? "#222222" : "#c8c8c8";

    var scoreboardChart = new
    {
        type = "line",
        data = new
        {
            labels = Model.Maps?.Select(m => m.MapName),
            datasets = Model.Teams?.Select(team => new
            {
                label = $"{SharedLocalizer["Team"].Value} {team.Code}",
                data = Model.Maps?.Select(m => team.Code == 'A' ? m.Scoring?.TeamA : m.Scoring?.TeamB).Select(s => s?.Score ?? 0),
                borderColor = team.Code == Model.Winner?.Code ? success : danger,
                backgroundColor = transparent,
                lineTension = 0
            })
        },
        options = new
        {
            title = new
            {
                display = true,
                text = SharedLocalizer["Scoreboard"].Value,
                fontColor
            },
            legend = new
            {
                display = true,
                position = "bottom",
                labels = new { fontColor }
            },
            responsive = true,
            maintainAspectRatio = false,
            scales = new
            {
                xAxes = new object[]
                {
                    new
                    {
                        ticks = new { fontColor }
                    }
                },
                yAxes = new object[]
                {
                    new
                    {
                        ticks = new
                        {
                            fontColor,
                            beginAtZero = true
                        }
                    }
                }
            }
        }
    };

    var pointsEarnedOnMapChart = new
    {
        type = "bar",
        data = new
        {
            labels = Model.Maps?.Select(m => m.MapName),
            datasets = new List<object>()
        },
        options = new
        {
            title = new
            {
                display = true,
                text = SharedLocalizer["PointsEarnedOnMap"].Value,
                fontColor
            },
            legend = new
            {
                display = true,
                position = "bottom",
                labels = new { fontColor }
            },
            responsive = true,
            maintainAspectRatio = false,
            scales = new
            {
                xAxes = new object[]
                {
                    new
                    {
                        ticks = new { fontColor }
                    }
                },
                yAxes = new object[]
                {
                    new
                    {
                        ticks = new
                        {
                            fontColor,
                            beginAtZero = true
                        }
                    }
                }
            }
        }
    };

    var empty = Array.Empty<int>();

    var teamA = Model.Maps?
        .Select(m => m.Scoring?.TeamA?.Score ?? 0)
        .ToArray() ?? empty;

    var teamB = Model.Maps?
        .Select(m => m.Scoring?.TeamB?.Score ?? 0)
        .ToArray() ?? empty;

    for (var i = teamA.Length - 1; i > 0; i--)
        teamA[i] -= teamA[i - 1];

    for (var i = teamB.Length - 1; i > 0; i--)
        teamB[i] -= teamB[i - 1];

    for (var i = 0; i < 2; i++)
    {
        var team = Model.Teams?[i];
        var color = team?.Code == Model.Winner?.Code ? success : danger;

        pointsEarnedOnMapChart.data.datasets.Add(new
        {
            label = $"{SharedLocalizer["Team"].Value} {team?.Code}",
            data = team?.Code == 'A' ? teamA : teamB,
            borderColor = color,
            backgroundColor = color
        });
    }
}

<div class="panel panel-primary">
    <div class="panel-heading" style="padding: 6px 10px;">
        <div class="row">
            <div class="col-xs-8">
                <h4 style="display: inline; font-weight: bold">
                    @Model.Campaign
                </h4>
                <small style="font-style: italic"> - @Model.ConfigurationName</small>
                <p>
                    @string.Format(Localizer["TeamWonByPoints"].Value, Model.Winner?.Code, Model.Diff)
                </p>
            </div>
            <div class="col-xs-4 text-right">
                <p data-toggle="tooltip" data-placement="top" title="@Localizer["GameOccurrenceDateTime"]">
                    <img src="~/imgs/icons/calendar.png" alt="@SharedLocalizer["Calendar"]" class="icon"/>
                    @string.Format(Localizer["MatchStartDateTime"].Value, Model.MatchStart)
                </p>

                @if (Model.MatchElapsed.HasValue)
                {
                    <p data-toggle="tooltip" data-placement="top" title="@Localizer["GameDurationInHours"]">
                        <img src="~/imgs/icons/clock.png" alt="@SharedLocalizer["Clock"]" class="icon"/>
                        @Model.MatchElapsed.Value.ToString(@"hh\:mm\:ss")
                    </p>
                }
            </div>
        </div>
    </div>
    <div class="panel-body">
        <div class="row">
            <div class="col-xs-2 left-side text-center">
                <img src="@CampaignThumb[Model.Campaign]" alt="@Model.Campaign" class="img-responsive img-thumbnail img-campaign"/>
                @if (Model.ShowDetailsButton)
                {
                    <a href="@Url.Action("Details", "LastMatches", new { start = Model.Start, end = Model.End })" class="btn btn-danger btn-xs btn-block" style="margin-top: 10px;">
                        @SharedLocalizer["Details"]
                    </a>
                }
            </div>
            <div class="col-xs-10 right-side">
                <div class="row teams">
                    @foreach (var team in Model.Teams ?? MatchResult.TeamResult.EmptyCollection)
                    {
                        <div class="col-xs-6">
                            <div class="panel panel-@(team.Code == Model.Winner?.Code ? "success" : "danger")" style="margin-bottom: 0;">
                                <div class="panel-heading bold" style="padding: 3px 15px">
                                    <div class="row">
                                        <div class="col-xs-6">
                                            @SharedLocalizer["Team"] @team.Code
                                        </div>
                                        <div class="col-xs-6 text-right">
                                            @team.Score.ToString("N0")
                                        </div>
                                    </div>
                                </div>
                                <div class="panel-body" style="padding: 0">
                                    <table class="table table-striped table-hover table-bordered table-condensed">
                                        <tbody>
                                        @foreach (var player in team.Players?
                                                      .OrderByDescending(p => p.TotalMvp)
                                                      .ThenByDescending(p => p.MvpSiDamage)
                                                      .ThenByDescending(p => p.MvpCommon)
                                                      .ThenBy(p => p.LvpFfGiven)
                                                      .ToList() ?? MatchResult.PlayerResult.EmptyCollection)
                                        {
                                            <tr class="@(CurrentUser.ItIsMe(player.CommunityId) ? "it-is-me" : string.Empty)">
                                                <td style="padding: 2px" class="slim">
                                                    <a href="@Url.Action("Details", "Players", new { communityId = player.CommunityId })" title="@player.Name">
                                                        <img src="@UserAvatar[player.CommunityId]" alt="@player.Name" style="width: 32px; border-radius: 5px" onerror="imgOnError(this)"/>
                                                    </a>
                                                </td>
                                                <td class="vertical-align-middle">
                                                    @Html.ActionLink(player.Name?.Truncate(30) ?? "-", "Details", "Players", new { communityId = player.CommunityId })
                                                    @if (player.MvpSiDamage > 0 || player.MvpCommon > 0)
                                                    {
                                                        <small> | </small>
                                                    }

                                                    @for (var i = 0; i < player.MvpSiDamage; i++)
                                                    {
                                                        <img src="~/imgs/icons/star.png" alt="@SharedLocalizer["MvpSiDamage"]" class="icon" data-toggle="tooltip" data-placement="top" title="@SharedLocalizer["MvpSiDamage"]"/>
                                                    }

                                                    @for (var i = 0; i < player.MvpCommon; i++)
                                                    {
                                                        <img src="~/imgs/icons/star-blue.png" alt="@SharedLocalizer["MvpCommon"]" class="icon" data-toggle="tooltip" data-placement="top" title="@SharedLocalizer["MvpCommon"]"/>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <hr/>

        <div class="row">
            <div class="col-sm-6 col-xs-12" style="padding-right: 0">
                <div style="height: 200px;">
                    @{
                        var canvas = new TagBuilder("canvas");
                        canvas.AddCssClass("app-chart");
                        canvas.Attributes.Add("style", "max-height: 100%;");
                        canvas.Attributes.Add("data-chart", JsonSerializer.Serialize(scoreboardChart));
                    }
                    @canvas
                </div>
            </div>

            <div class="col-sm-6 col-xs-12" style="padding-left: 0">
                <div style="height: 200px;">
                    @{
                        canvas = new TagBuilder("canvas");
                        canvas.AddCssClass("app-chart");
                        canvas.Attributes.Add("style", "max-height: 100%;");
                        canvas.Attributes.Add("data-chart", JsonSerializer.Serialize(pointsEarnedOnMapChart));
                    }
                    @canvas
                </div>
            </div>
        </div>
    </div>
</div>